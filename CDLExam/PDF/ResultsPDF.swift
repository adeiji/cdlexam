//
//  ResultsPDF.swift
//  CDLExam
//
//  Created by Adebayo Ijidakinro on 3/19/18.
//  Copyright Â© 2018 Dephyned. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ResultsPDF : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 815, height: 180), resizing: ResizingBehavior = .aspectFit, txtName: String = "Billy Madison", licenseNumber: String = "574574", dob: String = "3/18/2000", date: String = "3/28/2018", tester: String = "Andrew Williams", testerNumber: String = "5784487", preTripScore: String = "88") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 815, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 815, y: resizedFrame.height / 180)


        //// Color Declarations
        let color = UIColor(red: 0.891, green: 0.891, blue: 0.891, alpha: 1.000)

        //// headerTitle Drawing
        let headerTitleRect = CGRect(x: 161, y: 7, width: 486, height: 53)
        let headerTitleTextContent = "Florida Department of Highway Safety and Motor Vehicles Division of Drivers Licenses"
        let headerTitleStyle = NSMutableParagraphStyle()
        headerTitleStyle.alignment = .center
        let headerTitleFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.systemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: headerTitleStyle,
        ] as [NSAttributedStringKey: Any]

        let headerTitleTextHeight: CGFloat = headerTitleTextContent.boundingRect(with: CGSize(width: headerTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: headerTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: headerTitleRect)
        headerTitleTextContent.draw(in: CGRect(x: headerTitleRect.minX, y: headerTitleRect.minY + (headerTitleRect.height - headerTitleTextHeight) / 2, width: headerTitleRect.width, height: headerTitleTextHeight), withAttributes: headerTitleFontAttributes)
        context.restoreGState()


        //// driverLabel Drawing
        let driverLabelRect = CGRect(x: 26, y: 60, width: 46, height: 25)
        let driverLabelTextContent = "DRIVER"
        let driverLabelStyle = NSMutableParagraphStyle()
        driverLabelStyle.alignment = .left
        let driverLabelFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: driverLabelStyle,
        ] as [NSAttributedStringKey: Any]

        let driverLabelTextHeight: CGFloat = driverLabelTextContent.boundingRect(with: CGSize(width: driverLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: driverLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: driverLabelRect)
        driverLabelTextContent.draw(in: CGRect(x: driverLabelRect.minX, y: driverLabelRect.minY + (driverLabelRect.height - driverLabelTextHeight) / 2, width: driverLabelRect.width, height: driverLabelTextHeight), withAttributes: driverLabelFontAttributes)
        context.restoreGState()


        //// name Drawing
        let nameRect = CGRect(x: 77, y: 60, width: 146, height: 25)
        let nameStyle = NSMutableParagraphStyle()
        nameStyle.alignment = .left
        let nameFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: nameStyle,
        ] as [NSAttributedStringKey: Any]

        let nameTextHeight: CGFloat = txtName.boundingRect(with: CGSize(width: nameRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nameFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nameRect)
        txtName.draw(in: CGRect(x: nameRect.minX, y: nameRect.minY + (nameRect.height - nameTextHeight) / 2, width: nameRect.width, height: nameTextHeight), withAttributes: nameFontAttributes)
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 76.5, y: 84.5))
        bezierPath.addCurve(to: CGPoint(x: 240.51, y: 84.5), controlPoint1: CGPoint(x: 258.29, y: 85.5), controlPoint2: CGPoint(x: 240.51, y: 84.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// driverLabel 2 Drawing
        let driverLabel2Rect = CGRect(x: 255, y: 60, width: 81, height: 25)
        let driverLabel2TextContent = "DRIVER LIC#"
        let driverLabel2Style = NSMutableParagraphStyle()
        driverLabel2Style.alignment = .left
        let driverLabel2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: driverLabel2Style,
        ] as [NSAttributedStringKey: Any]

        let driverLabel2TextHeight: CGFloat = driverLabel2TextContent.boundingRect(with: CGSize(width: driverLabel2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: driverLabel2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: driverLabel2Rect)
        driverLabel2TextContent.draw(in: CGRect(x: driverLabel2Rect.minX, y: driverLabel2Rect.minY + (driverLabel2Rect.height - driverLabel2TextHeight) / 2, width: driverLabel2Rect.width, height: driverLabel2TextHeight), withAttributes: driverLabel2FontAttributes)
        context.restoreGState()


        //// name 2 Drawing
        let name2Rect = CGRect(x: 335, y: 60, width: 145, height: 25)
        let name2Style = NSMutableParagraphStyle()
        name2Style.alignment = .left
        let name2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name2Style,
        ] as [NSAttributedStringKey: Any]

        let name2TextHeight: CGFloat = licenseNumber.boundingRect(with: CGSize(width: name2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name2Rect)
        licenseNumber.draw(in: CGRect(x: name2Rect.minX, y: name2Rect.minY + (name2Rect.height - name2TextHeight) / 2, width: name2Rect.width, height: name2TextHeight), withAttributes: name2FontAttributes)
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 334.5, y: 84.5))
        bezier2Path.addCurve(to: CGPoint(x: 479.08, y: 84.5), controlPoint1: CGPoint(x: 494.76, y: 85.5), controlPoint2: CGPoint(x: 479.08, y: 84.5))
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// driverLabel 3 Drawing
        let driverLabel3Rect = CGRect(x: 485, y: 60, width: 34, height: 25)
        let driverLabel3TextContent = "DOB"
        let driverLabel3Style = NSMutableParagraphStyle()
        driverLabel3Style.alignment = .left
        let driverLabel3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: driverLabel3Style,
        ] as [NSAttributedStringKey: Any]

        let driverLabel3TextHeight: CGFloat = driverLabel3TextContent.boundingRect(with: CGSize(width: driverLabel3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: driverLabel3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: driverLabel3Rect)
        driverLabel3TextContent.draw(in: CGRect(x: driverLabel3Rect.minX, y: driverLabel3Rect.minY + (driverLabel3Rect.height - driverLabel3TextHeight) / 2, width: driverLabel3Rect.width, height: driverLabel3TextHeight), withAttributes: driverLabel3FontAttributes)
        context.restoreGState()


        //// name 3 Drawing
        let name3Rect = CGRect(x: 520, y: 60, width: 106, height: 25)
        let name3Style = NSMutableParagraphStyle()
        name3Style.alignment = .left
        let name3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name3Style,
        ] as [NSAttributedStringKey: Any]

        let name3TextHeight: CGFloat = dob.boundingRect(with: CGSize(width: name3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name3Rect)
        dob.draw(in: CGRect(x: name3Rect.minX, y: name3Rect.minY + (name3Rect.height - name3TextHeight) / 2, width: name3Rect.width, height: name3TextHeight), withAttributes: name3FontAttributes)
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 519.5, y: 84.5))
        bezier3Path.addCurve(to: CGPoint(x: 625.19, y: 84.5), controlPoint1: CGPoint(x: 636.65, y: 85.5), controlPoint2: CGPoint(x: 625.19, y: 84.5))
        UIColor.black.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// driverLabel 4 Drawing
        let driverLabel4Rect = CGRect(x: 635, y: 60, width: 34, height: 25)
        let driverLabel4TextContent = "DATE"
        let driverLabel4Style = NSMutableParagraphStyle()
        driverLabel4Style.alignment = .left
        let driverLabel4FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: driverLabel4Style,
        ] as [NSAttributedStringKey: Any]

        let driverLabel4TextHeight: CGFloat = driverLabel4TextContent.boundingRect(with: CGSize(width: driverLabel4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: driverLabel4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: driverLabel4Rect)
        driverLabel4TextContent.draw(in: CGRect(x: driverLabel4Rect.minX, y: driverLabel4Rect.minY + (driverLabel4Rect.height - driverLabel4TextHeight) / 2, width: driverLabel4Rect.width, height: driverLabel4TextHeight), withAttributes: driverLabel4FontAttributes)
        context.restoreGState()


        //// name 4 Drawing
        let name4Rect = CGRect(x: 670, y: 60, width: 74, height: 25)
        let name4Style = NSMutableParagraphStyle()
        name4Style.alignment = .left
        let name4FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name4Style,
        ] as [NSAttributedStringKey: Any]

        let name4TextHeight: CGFloat = date.boundingRect(with: CGSize(width: name4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name4Rect)
        date.draw(in: CGRect(x: name4Rect.minX, y: name4Rect.minY + (name4Rect.height - name4TextHeight) / 2, width: name4Rect.width, height: name4TextHeight), withAttributes: name4FontAttributes)
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 669.5, y: 84.5))
        bezier4Path.addCurve(to: CGPoint(x: 745.28, y: 84.5), controlPoint1: CGPoint(x: 753.5, y: 85.5), controlPoint2: CGPoint(x: 745.28, y: 84.5))
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// driverLabel 5 Drawing
        let driverLabel5Rect = CGRect(x: 26, y: 90, width: 46, height: 25)
        let driverLabel5TextContent = "TESTER"
        let driverLabel5Style = NSMutableParagraphStyle()
        driverLabel5Style.alignment = .left
        let driverLabel5FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: driverLabel5Style,
        ] as [NSAttributedStringKey: Any]

        let driverLabel5TextHeight: CGFloat = driverLabel5TextContent.boundingRect(with: CGSize(width: driverLabel5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: driverLabel5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: driverLabel5Rect)
        driverLabel5TextContent.draw(in: CGRect(x: driverLabel5Rect.minX, y: driverLabel5Rect.minY + (driverLabel5Rect.height - driverLabel5TextHeight) / 2, width: driverLabel5Rect.width, height: driverLabel5TextHeight), withAttributes: driverLabel5FontAttributes)
        context.restoreGState()


        //// name 5 Drawing
        let name5Rect = CGRect(x: 77, y: 90, width: 275, height: 25)
        let name5Style = NSMutableParagraphStyle()
        name5Style.alignment = .left
        let name5FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name5Style,
        ] as [NSAttributedStringKey: Any]

        let name5TextHeight: CGFloat = tester.boundingRect(with: CGSize(width: name5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name5Rect)
        tester.draw(in: CGRect(x: name5Rect.minX, y: name5Rect.minY + (name5Rect.height - name5TextHeight) / 2, width: name5Rect.width, height: name5TextHeight), withAttributes: name5FontAttributes)
        context.restoreGState()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 78.5, y: 114.5))
        bezier5Path.addCurve(to: CGPoint(x: 352.7, y: 114.5), controlPoint1: CGPoint(x: 382.44, y: 115.5), controlPoint2: CGPoint(x: 352.7, y: 114.5))
        UIColor.black.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()


        //// name 6 Drawing
        let name6Rect = CGRect(x: 386, y: 90, width: 65, height: 25)
        let name6TextContent = "TESTER #"
        let name6Style = NSMutableParagraphStyle()
        name6Style.alignment = .left
        let name6FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name6Style,
        ] as [NSAttributedStringKey: Any]

        let name6TextHeight: CGFloat = name6TextContent.boundingRect(with: CGSize(width: name6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name6Rect)
        name6TextContent.draw(in: CGRect(x: name6Rect.minX, y: name6Rect.minY + (name6Rect.height - name6TextHeight) / 2, width: name6Rect.width, height: name6TextHeight), withAttributes: name6FontAttributes)
        context.restoreGState()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 450.5, y: 114.5))
        bezier6Path.addCurve(to: CGPoint(x: 550.21, y: 114.5), controlPoint1: CGPoint(x: 561.02, y: 115.5), controlPoint2: CGPoint(x: 550.21, y: 114.5))
        UIColor.black.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()


        //// name 7 Drawing
        let name7Rect = CGRect(x: 448, y: 90, width: 65, height: 25)
        let name7Style = NSMutableParagraphStyle()
        name7Style.alignment = .left
        let name7FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name7Style,
        ] as [NSAttributedStringKey: Any]

        let name7TextHeight: CGFloat = testerNumber.boundingRect(with: CGSize(width: name7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name7Rect)
        testerNumber.draw(in: CGRect(x: name7Rect.minX, y: name7Rect.minY + (name7Rect.height - name7TextHeight) / 2, width: name7Rect.width, height: name7TextHeight), withAttributes: name7FontAttributes)
        context.restoreGState()


        //// name 8 Drawing
        let name8Rect = CGRect(x: 556, y: 90, width: 101, height: 25)
        let name8TextContent = "PRE-TRIP SCORE"
        let name8Style = NSMutableParagraphStyle()
        name8Style.alignment = .left
        let name8FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name8Style,
        ] as [NSAttributedStringKey: Any]

        let name8TextHeight: CGFloat = name8TextContent.boundingRect(with: CGSize(width: name8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name8Rect)
        name8TextContent.draw(in: CGRect(x: name8Rect.minX, y: name8Rect.minY + (name8Rect.height - name8TextHeight) / 2, width: name8Rect.width, height: name8TextHeight), withAttributes: name8FontAttributes)
        context.restoreGState()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 660.5, y: 114.5))
        bezier7Path.addCurve(to: CGPoint(x: 745.25, y: 114.5), controlPoint1: CGPoint(x: 754.44, y: 114.5), controlPoint2: CGPoint(x: 745.25, y: 114.5))
        UIColor.black.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()


        //// name 9 Drawing
        let name9Rect = CGRect(x: 658, y: 90, width: 65, height: 25)
        let name9Style = NSMutableParagraphStyle()
        name9Style.alignment = .left
        let name9FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: name9Style,
        ] as [NSAttributedStringKey: Any]

        let name9TextHeight: CGFloat = preTripScore.boundingRect(with: CGSize(width: name9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: name9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: name9Rect)
        preTripScore.draw(in: CGRect(x: name9Rect.minX, y: name9Rect.minY + (name9Rect.height - name9TextHeight) / 2, width: name9Rect.width, height: name9TextHeight), withAttributes: name9FontAttributes)
        context.restoreGState()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 25, y: 127, width: 767, height: 30))
        color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 307, y: 130, width: 202, height: 25)
        let textTextContent = "VEHICLE INSPECTION TEST"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: 15),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAllVehicles(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 815, height: 195), resizing: ResizingBehavior = .aspectFit, safetyBelt: Bool = true, emergencyEquipment: Bool = true, safeStart: Bool = true, temperatureGauge: Bool = true, oilPressureGauge: Bool = true, voltmeterGauge: Bool = true, airGauge: Bool = true, lightingIndicators: Bool = true, horns: Bool = true, heaterDefroster: Bool = true, windshieldMirrors: Bool = true, wipersWashers: Bool = true, parkingBrake: Bool = true, serviceBrake: Bool = true, airBrakeCheck: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 815, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 815, y: resizedFrame.height / 195)


        //// label Drawing
        let labelRect = CGRect(x: 23, y: 45, width: 116, height: 16)
        let labelTextContent = "safety belt"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: labelStyle,
        ] as [NSAttributedStringKey: Any]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        if (safetyBelt) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 191, y: 48, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectanglePath.fill()
        }


        //// label 2 Drawing
        let label2Rect = CGRect(x: 23, y: 65, width: 151, height: 30)
        let label2TextContent = "emergency equipment \n(F-E-T)"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label2Style,
        ] as [NSAttributedStringKey: Any]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        if (emergencyEquipment) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: 191, y: 82, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle2Path.fill()
        }


        //// label 3 Drawing
        let label3Rect = CGRect(x: 212, y: 45, width: 116, height: 16)
        let label3TextContent = "*air gauge"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label3Style,
        ] as [NSAttributedStringKey: Any]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        if (airGauge) {
            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(rect: CGRect(x: 379, y: 48, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle3Path.fill()
        }


        //// label 4 Drawing
        let label4Rect = CGRect(x: 212, y: 65, width: 177, height: 16)
        let label4TextContent = "lighting indicators"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label4Style,
        ] as [NSAttributedStringKey: Any]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        if (lightingIndicators) {
            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: CGRect(x: 379, y: 68, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle4Path.fill()
        }


        //// label 5 Drawing
        let label5Rect = CGRect(x: 402, y: 45, width: 116, height: 16)
        let label5TextContent = "wipers & washers"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label5Style,
        ] as [NSAttributedStringKey: Any]

        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        if (wipersWashers) {
            //// Rectangle 5 Drawing
            let rectangle5Path = UIBezierPath(rect: CGRect(x: 569, y: 48, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle5Path.fill()
        }


        //// label 6 Drawing
        let label6Rect = CGRect(x: 402, y: 65, width: 177, height: 16)
        let label6TextContent = "parking brake"
        let label6Style = NSMutableParagraphStyle()
        label6Style.alignment = .left
        let label6FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label6Style,
        ] as [NSAttributedStringKey: Any]

        let label6TextHeight: CGFloat = label6TextContent.boundingRect(with: CGSize(width: label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label6Rect)
        label6TextContent.draw(in: CGRect(x: label6Rect.minX, y: label6Rect.minY + (label6Rect.height - label6TextHeight) / 2, width: label6Rect.width, height: label6TextHeight), withAttributes: label6FontAttributes)
        context.restoreGState()


        if (parkingBrake) {
            //// Rectangle 6 Drawing
            let rectangle6Path = UIBezierPath(rect: CGRect(x: 569, y: 68, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle6Path.fill()
        }


        //// label 7 Drawing
        let label7Rect = CGRect(x: 23, y: 100, width: 116, height: 16)
        let label7TextContent = "safe start"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .left
        let label7FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label7Style,
        ] as [NSAttributedStringKey: Any]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()


        if (safeStart) {
            //// Rectangle 7 Drawing
            let rectangle7Path = UIBezierPath(rect: CGRect(x: 191, y: 103, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle7Path.fill()
        }


        //// label 8 Drawing
        let label8Rect = CGRect(x: 23, y: 120, width: 177, height: 16)
        let label8TextContent = "temperature gauge"
        let label8Style = NSMutableParagraphStyle()
        label8Style.alignment = .left
        let label8FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label8Style,
        ] as [NSAttributedStringKey: Any]

        let label8TextHeight: CGFloat = label8TextContent.boundingRect(with: CGSize(width: label8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label8Rect)
        label8TextContent.draw(in: CGRect(x: label8Rect.minX, y: label8Rect.minY + (label8Rect.height - label8TextHeight) / 2, width: label8Rect.width, height: label8TextHeight), withAttributes: label8FontAttributes)
        context.restoreGState()


        if (temperatureGauge) {
            //// Rectangle 8 Drawing
            let rectangle8Path = UIBezierPath(rect: CGRect(x: 191, y: 123, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle8Path.fill()
        }


        //// label 9 Drawing
        let label9Rect = CGRect(x: 212, y: 85, width: 116, height: 16)
        let label9TextContent = "horn(s)"
        let label9Style = NSMutableParagraphStyle()
        label9Style.alignment = .left
        let label9FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label9Style,
        ] as [NSAttributedStringKey: Any]

        let label9TextHeight: CGFloat = label9TextContent.boundingRect(with: CGSize(width: label9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label9Rect)
        label9TextContent.draw(in: CGRect(x: label9Rect.minX, y: label9Rect.minY + (label9Rect.height - label9TextHeight) / 2, width: label9Rect.width, height: label9TextHeight), withAttributes: label9FontAttributes)
        context.restoreGState()


        if (horns) {
            //// Rectangle 9 Drawing
            let rectangle9Path = UIBezierPath(rect: CGRect(x: 379, y: 88, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle9Path.fill()
        }


        //// label 10 Drawing
        let label10Rect = CGRect(x: 212, y: 105, width: 177, height: 16)
        let label10TextContent = "heater & defroster"
        let label10Style = NSMutableParagraphStyle()
        label10Style.alignment = .left
        let label10FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label10Style,
        ] as [NSAttributedStringKey: Any]

        let label10TextHeight: CGFloat = label10TextContent.boundingRect(with: CGSize(width: label10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label10Rect)
        label10TextContent.draw(in: CGRect(x: label10Rect.minX, y: label10Rect.minY + (label10Rect.height - label10TextHeight) / 2, width: label10Rect.width, height: label10TextHeight), withAttributes: label10FontAttributes)
        context.restoreGState()


        if (heaterDefroster) {
            //// Rectangle 10 Drawing
            let rectangle10Path = UIBezierPath(rect: CGRect(x: 379, y: 108, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle10Path.fill()
        }


        //// label 11 Drawing
        let label11Rect = CGRect(x: 402, y: 85, width: 116, height: 16)
        let label11TextContent = "service brake / ABS"
        let label11Style = NSMutableParagraphStyle()
        label11Style.alignment = .left
        let label11FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label11Style,
        ] as [NSAttributedStringKey: Any]

        let label11TextHeight: CGFloat = label11TextContent.boundingRect(with: CGSize(width: label11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label11Rect)
        label11TextContent.draw(in: CGRect(x: label11Rect.minX, y: label11Rect.minY + (label11Rect.height - label11TextHeight) / 2, width: label11Rect.width, height: label11TextHeight), withAttributes: label11FontAttributes)
        context.restoreGState()


        if (serviceBrake) {
            //// Rectangle 11 Drawing
            let rectangle11Path = UIBezierPath(rect: CGRect(x: 569, y: 88, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle11Path.fill()
        }


        //// label 12 Drawing
        let label12Rect = CGRect(x: 402, y: 105, width: 177, height: 33)
        let label12TextContent = "*air brake check (L-A-B) or\nhydraulic brake check"
        let label12Style = NSMutableParagraphStyle()
        label12Style.alignment = .left
        let label12FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label12Style,
        ] as [NSAttributedStringKey: Any]

        let label12TextHeight: CGFloat = label12TextContent.boundingRect(with: CGSize(width: label12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label12Rect)
        label12TextContent.draw(in: CGRect(x: label12Rect.minX, y: label12Rect.minY + (label12Rect.height - label12TextHeight) / 2, width: label12Rect.width, height: label12TextHeight), withAttributes: label12FontAttributes)
        context.restoreGState()


        //// label 13 Drawing
        let label13Rect = CGRect(x: 23, y: 140, width: 116, height: 16)
        let label13TextContent = "oil pressure gauge"
        let label13Style = NSMutableParagraphStyle()
        label13Style.alignment = .left
        let label13FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label13Style,
        ] as [NSAttributedStringKey: Any]

        let label13TextHeight: CGFloat = label13TextContent.boundingRect(with: CGSize(width: label13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label13Rect)
        label13TextContent.draw(in: CGRect(x: label13Rect.minX, y: label13Rect.minY + (label13Rect.height - label13TextHeight) / 2, width: label13Rect.width, height: label13TextHeight), withAttributes: label13FontAttributes)
        context.restoreGState()


        if (oilPressureGauge) {
            //// Rectangle 13 Drawing
            let rectangle13Path = UIBezierPath(rect: CGRect(x: 191, y: 143, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle13Path.fill()
        }


        //// label 14 Drawing
        let label14Rect = CGRect(x: 23, y: 160, width: 177, height: 16)
        let label14TextContent = "ammeter or voltmeter gauge"
        let label14Style = NSMutableParagraphStyle()
        label14Style.alignment = .left
        let label14FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label14Style,
        ] as [NSAttributedStringKey: Any]

        let label14TextHeight: CGFloat = label14TextContent.boundingRect(with: CGSize(width: label14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label14Rect)
        label14TextContent.draw(in: CGRect(x: label14Rect.minX, y: label14Rect.minY + (label14Rect.height - label14TextHeight) / 2, width: label14Rect.width, height: label14TextHeight), withAttributes: label14FontAttributes)
        context.restoreGState()


        if (voltmeterGauge) {
            //// Rectangle 14 Drawing
            let rectangle14Path = UIBezierPath(rect: CGRect(x: 191, y: 163, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle14Path.fill()
        }


        //// label 15 Drawing
        let label15Rect = CGRect(x: 212, y: 125, width: 116, height: 16)
        let label15TextContent = "windshield & mirrors"
        let label15Style = NSMutableParagraphStyle()
        label15Style.alignment = .left
        let label15FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label15Style,
        ] as [NSAttributedStringKey: Any]

        let label15TextHeight: CGFloat = label15TextContent.boundingRect(with: CGSize(width: label15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label15Rect)
        label15TextContent.draw(in: CGRect(x: label15Rect.minX, y: label15Rect.minY + (label15Rect.height - label15TextHeight) / 2, width: label15Rect.width, height: label15TextHeight), withAttributes: label15FontAttributes)
        context.restoreGState()


        if (windshieldMirrors) {
            //// Rectangle 15 Drawing
            let rectangle15Path = UIBezierPath(rect: CGRect(x: 379, y: 128, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle15Path.fill()
        }


        if (airBrakeCheck) {
            //// Rectangle 17 Drawing
            let rectangle17Path = UIBezierPath(rect: CGRect(x: 569, y: 123, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle17Path.fill()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 596.5, y: 42.5))
        bezierPath.addLine(to: CGPoint(x: 596.5, y: 167.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 259, y: 23, width: 100, height: 18)
        let textTextContent = "Engine Start"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 354, y: 5, width: 100, height: 18)
        let text2TextContent = "ALL VEHICLES"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAllCombinationVehicles(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 815, height: 234), resizing: ResizingBehavior = .aspectFit, acvTrtTruckAirElectricConnectrs: Bool = true, acvTrtTruckCouplingMountingBolts: Bool = true, acvTrtTruckCouplingPintleHook: Bool = true, acvTrtTruckCouplingHitchReleaseLever: Bool = true, acvTrtTruckCouplingSafetyDevices: Bool = true, acvTrtTrailerAirElectricConnectorsLines: Bool = true, acvTrtTrailerTongueStorageArea: Bool = true, acvTrtTrailerCouplingTongueDrawer: Bool = true, acvTrtTrailerCouplingMountingBolts: Bool = true, acvTrtTrailerCouplingSafetyDevices: Bool = true, acvTrtTrailerCouplingSlidingPintle: Bool = true, acvTstTractorAirElectricConnectorsLines: Bool = true, acvTstTractorCouplingMountingBolts: Bool = true, acvTstTractorCouplingPlatform: Bool = true, acvTstTractorCouplingLockingJawsLever: Bool = true, acvTstTractorCouplingReleaseArmSafetyLatch: Bool = true, acvTstTractorCouplingFifthWheelSkidPlate: Bool = true, acvTstTractorCouplingSlideFifthWheelPins: Bool = true, acvTstSemiTrailerAirElectricConnectors: Bool = true, acvTstSemiTrailerCouplingMountingBolts: Bool = true, acvTstSemiTrailerCouplingPlatform: Bool = true, acvTstSemiTrailerCouplingLockingJawsLever: Bool = true, acvTstSemiTrailerCouplingReleaseArmSafetyLatch: Bool = true, acvTstSemiTrailerCouplingFifthWheelSkidPlate: Bool = true, acvTstSemiTrailerCouplingSlideFifthWheelPins: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 815, height: 234), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 815, y: resizedFrame.height / 234)


        //// label Drawing
        let labelRect = CGRect(x: 23, y: 45, width: 166, height: 16)
        let labelTextContent = "air & electric connectors"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .left
        let labelFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: labelStyle,
        ] as [NSAttributedStringKey: Any]

        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()


        if (acvTrtTruckAirElectricConnectrs) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 191, y: 48, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectanglePath.fill()
        }


        //// label 3 Drawing
        let label3Rect = CGRect(x: 212, y: 40, width: 167, height: 36)
        let label3TextContent = "air & electric connectors & lines"
        let label3Style = NSMutableParagraphStyle()
        label3Style.alignment = .left
        let label3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label3Style,
        ] as [NSAttributedStringKey: Any]

        let label3TextHeight: CGFloat = label3TextContent.boundingRect(with: CGSize(width: label3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label3Rect)
        label3TextContent.draw(in: CGRect(x: label3Rect.minX, y: label3Rect.minY + (label3Rect.height - label3TextHeight) / 2, width: label3Rect.width, height: label3TextHeight), withAttributes: label3FontAttributes)
        context.restoreGState()


        if (acvTrtTrailerAirElectricConnectorsLines) {
            //// Rectangle 3 Drawing
            let rectangle3Path = UIBezierPath(rect: CGRect(x: 379, y: 58, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle3Path.fill()
        }


        //// label 4 Drawing
        let label4Rect = CGRect(x: 212, y: 77, width: 177, height: 16)
        let label4TextContent = "tongue storage area"
        let label4Style = NSMutableParagraphStyle()
        label4Style.alignment = .left
        let label4FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label4Style,
        ] as [NSAttributedStringKey: Any]

        let label4TextHeight: CGFloat = label4TextContent.boundingRect(with: CGSize(width: label4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label4Rect)
        label4TextContent.draw(in: CGRect(x: label4Rect.minX, y: label4Rect.minY + (label4Rect.height - label4TextHeight) / 2, width: label4Rect.width, height: label4TextHeight), withAttributes: label4FontAttributes)
        context.restoreGState()


        if (acvTrtTrailerTongueStorageArea) {
            //// Rectangle 4 Drawing
            let rectangle4Path = UIBezierPath(rect: CGRect(x: 379, y: 80, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle4Path.fill()
        }


        //// label 5 Drawing
        let label5Rect = CGRect(x: 412, y: 44, width: 164, height: 24)
        let label5TextContent = "air & electric connectors & lines"
        let label5Style = NSMutableParagraphStyle()
        label5Style.alignment = .left
        let label5FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label5Style,
        ] as [NSAttributedStringKey: Any]

        let label5TextHeight: CGFloat = label5TextContent.boundingRect(with: CGSize(width: label5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label5Rect)
        label5TextContent.draw(in: CGRect(x: label5Rect.minX, y: label5Rect.minY + (label5Rect.height - label5TextHeight) / 2, width: label5Rect.width, height: label5TextHeight), withAttributes: label5FontAttributes)
        context.restoreGState()


        if (acvTstTractorAirElectricConnectorsLines) {
            //// Rectangle 5 Drawing
            let rectangle5Path = UIBezierPath(rect: CGRect(x: 579, y: 55, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle5Path.fill()
        }


        //// label 6 Drawing
        let label6Rect = CGRect(x: 412, y: 95, width: 177, height: 16)
        let label6TextContent = "mounting bolts"
        let label6Style = NSMutableParagraphStyle()
        label6Style.alignment = .left
        let label6FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label6Style,
        ] as [NSAttributedStringKey: Any]

        let label6TextHeight: CGFloat = label6TextContent.boundingRect(with: CGSize(width: label6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label6Rect)
        label6TextContent.draw(in: CGRect(x: label6Rect.minX, y: label6Rect.minY + (label6Rect.height - label6TextHeight) / 2, width: label6Rect.width, height: label6TextHeight), withAttributes: label6FontAttributes)
        context.restoreGState()


        if (acvTstTractorCouplingMountingBolts) {
            //// Rectangle 6 Drawing
            let rectangle6Path = UIBezierPath(rect: CGRect(x: 579, y: 98, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle6Path.fill()
        }


        //// label 7 Drawing
        let label7Rect = CGRect(x: 23, y: 114, width: 116, height: 16)
        let label7TextContent = "mounting bolts"
        let label7Style = NSMutableParagraphStyle()
        label7Style.alignment = .left
        let label7FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label7Style,
        ] as [NSAttributedStringKey: Any]

        let label7TextHeight: CGFloat = label7TextContent.boundingRect(with: CGSize(width: label7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label7Rect)
        label7TextContent.draw(in: CGRect(x: label7Rect.minX, y: label7Rect.minY + (label7Rect.height - label7TextHeight) / 2, width: label7Rect.width, height: label7TextHeight), withAttributes: label7FontAttributes)
        context.restoreGState()


        if (acvTrtTruckCouplingMountingBolts) {
            //// Rectangle 7 Drawing
            let rectangle7Path = UIBezierPath(rect: CGRect(x: 191, y: 117, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle7Path.fill()
        }


        //// label 8 Drawing
        let label8Rect = CGRect(x: 23, y: 134, width: 177, height: 16)
        let label8TextContent = "pintle hook"
        let label8Style = NSMutableParagraphStyle()
        label8Style.alignment = .left
        let label8FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label8Style,
        ] as [NSAttributedStringKey: Any]

        let label8TextHeight: CGFloat = label8TextContent.boundingRect(with: CGSize(width: label8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label8Rect)
        label8TextContent.draw(in: CGRect(x: label8Rect.minX, y: label8Rect.minY + (label8Rect.height - label8TextHeight) / 2, width: label8Rect.width, height: label8TextHeight), withAttributes: label8FontAttributes)
        context.restoreGState()


        if (acvTrtTruckCouplingPintleHook) {
            //// Rectangle 8 Drawing
            let rectangle8Path = UIBezierPath(rect: CGRect(x: 191, y: 137, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle8Path.fill()
        }


        //// label 9 Drawing
        let label9Rect = CGRect(x: 212, y: 115, width: 116, height: 16)
        let label9TextContent = "tongue or drawer"
        let label9Style = NSMutableParagraphStyle()
        label9Style.alignment = .left
        let label9FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label9Style,
        ] as [NSAttributedStringKey: Any]

        let label9TextHeight: CGFloat = label9TextContent.boundingRect(with: CGSize(width: label9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label9Rect)
        label9TextContent.draw(in: CGRect(x: label9Rect.minX, y: label9Rect.minY + (label9Rect.height - label9TextHeight) / 2, width: label9Rect.width, height: label9TextHeight), withAttributes: label9FontAttributes)
        context.restoreGState()


        if (acvTrtTrailerCouplingTongueDrawer) {
            //// Rectangle 9 Drawing
            let rectangle9Path = UIBezierPath(rect: CGRect(x: 379, y: 118, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle9Path.fill()
        }


        //// label 10 Drawing
        let label10Rect = CGRect(x: 212, y: 135, width: 177, height: 16)
        let label10TextContent = "mounting bolts"
        let label10Style = NSMutableParagraphStyle()
        label10Style.alignment = .left
        let label10FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label10Style,
        ] as [NSAttributedStringKey: Any]

        let label10TextHeight: CGFloat = label10TextContent.boundingRect(with: CGSize(width: label10Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label10Rect)
        label10TextContent.draw(in: CGRect(x: label10Rect.minX, y: label10Rect.minY + (label10Rect.height - label10TextHeight) / 2, width: label10Rect.width, height: label10TextHeight), withAttributes: label10FontAttributes)
        context.restoreGState()


        if (acvTrtTrailerCouplingMountingBolts) {
            //// Rectangle 10 Drawing
            let rectangle10Path = UIBezierPath(rect: CGRect(x: 379, y: 138, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle10Path.fill()
        }


        //// label 11 Drawing
        let label11Rect = CGRect(x: 412, y: 115, width: 116, height: 16)
        let label11TextContent = "platform"
        let label11Style = NSMutableParagraphStyle()
        label11Style.alignment = .left
        let label11FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label11Style,
        ] as [NSAttributedStringKey: Any]

        let label11TextHeight: CGFloat = label11TextContent.boundingRect(with: CGSize(width: label11Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label11Rect)
        label11TextContent.draw(in: CGRect(x: label11Rect.minX, y: label11Rect.minY + (label11Rect.height - label11TextHeight) / 2, width: label11Rect.width, height: label11TextHeight), withAttributes: label11FontAttributes)
        context.restoreGState()


        if (acvTstTractorCouplingPlatform) {
            //// Rectangle 11 Drawing
            let rectangle11Path = UIBezierPath(rect: CGRect(x: 579, y: 118, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle11Path.fill()
        }


        //// label 13 Drawing
        let label13Rect = CGRect(x: 23, y: 154, width: 116, height: 16)
        let label13TextContent = "hitch release lever"
        let label13Style = NSMutableParagraphStyle()
        label13Style.alignment = .left
        let label13FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label13Style,
        ] as [NSAttributedStringKey: Any]

        let label13TextHeight: CGFloat = label13TextContent.boundingRect(with: CGSize(width: label13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label13Rect)
        label13TextContent.draw(in: CGRect(x: label13Rect.minX, y: label13Rect.minY + (label13Rect.height - label13TextHeight) / 2, width: label13Rect.width, height: label13TextHeight), withAttributes: label13FontAttributes)
        context.restoreGState()


        if (acvTrtTruckCouplingHitchReleaseLever) {
            //// Rectangle 13 Drawing
            let rectangle13Path = UIBezierPath(rect: CGRect(x: 191, y: 157, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle13Path.fill()
        }


        //// label 14 Drawing
        let label14Rect = CGRect(x: 23, y: 174, width: 177, height: 16)
        let label14TextContent = "safety devices"
        let label14Style = NSMutableParagraphStyle()
        label14Style.alignment = .left
        let label14FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label14Style,
        ] as [NSAttributedStringKey: Any]

        let label14TextHeight: CGFloat = label14TextContent.boundingRect(with: CGSize(width: label14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label14Rect)
        label14TextContent.draw(in: CGRect(x: label14Rect.minX, y: label14Rect.minY + (label14Rect.height - label14TextHeight) / 2, width: label14Rect.width, height: label14TextHeight), withAttributes: label14FontAttributes)
        context.restoreGState()


        if (acvTrtTruckCouplingSafetyDevices) {
            //// Rectangle 14 Drawing
            let rectangle14Path = UIBezierPath(rect: CGRect(x: 191, y: 177, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle14Path.fill()
        }


        //// label 15 Drawing
        let label15Rect = CGRect(x: 212, y: 155, width: 116, height: 16)
        let label15TextContent = "safety devices"
        let label15Style = NSMutableParagraphStyle()
        label15Style.alignment = .left
        let label15FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label15Style,
        ] as [NSAttributedStringKey: Any]

        let label15TextHeight: CGFloat = label15TextContent.boundingRect(with: CGSize(width: label15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label15Rect)
        label15TextContent.draw(in: CGRect(x: label15Rect.minX, y: label15Rect.minY + (label15Rect.height - label15TextHeight) / 2, width: label15Rect.width, height: label15TextHeight), withAttributes: label15FontAttributes)
        context.restoreGState()


        if (acvTrtTrailerCouplingSafetyDevices) {
            //// Rectangle 15 Drawing
            let rectangle15Path = UIBezierPath(rect: CGRect(x: 379, y: 158, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle15Path.fill()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 401.5, y: 24.5))
        bezierPath.addLine(to: CGPoint(x: 401.5, y: 233.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 55, y: 23, width: 100, height: 18)
        let textTextContent = "Truck"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 294, y: 5, width: 220, height: 18)
        let text2TextContent = "All Combination Vehicles"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 22, y: 97, width: 131, height: 18)
        let text3TextContent = "Coupling System"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .left
        let text3FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 246, y: 23, width: 100, height: 18)
        let text4TextContent = "Trailer"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 212, y: 98, width: 131, height: 18)
        let text5TextContent = "Coupling System"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .left
        let text5FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// label 2 Drawing
        let label2Rect = CGRect(x: 212, y: 174, width: 116, height: 16)
        let label2TextContent = "sliding pintle"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .left
        let label2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label2Style,
        ] as [NSAttributedStringKey: Any]

        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()


        if (acvTrtTrailerCouplingSlidingPintle) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: 379, y: 177, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle2Path.fill()
        }


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 411, y: 78, width: 131, height: 18)
        let text6TextContent = "Coupling System"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .left
        let text6FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text6Style,
        ] as [NSAttributedStringKey: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// label 12 Drawing
        let label12Rect = CGRect(x: 412, y: 135, width: 177, height: 16)
        let label12TextContent = "locking jaws or lever"
        let label12Style = NSMutableParagraphStyle()
        label12Style.alignment = .left
        let label12FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label12Style,
        ] as [NSAttributedStringKey: Any]

        let label12TextHeight: CGFloat = label12TextContent.boundingRect(with: CGSize(width: label12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label12Rect)
        label12TextContent.draw(in: CGRect(x: label12Rect.minX, y: label12Rect.minY + (label12Rect.height - label12TextHeight) / 2, width: label12Rect.width, height: label12TextHeight), withAttributes: label12FontAttributes)
        context.restoreGState()


        if (acvTstTractorCouplingLockingJawsLever) {
            //// Rectangle 12 Drawing
            let rectangle12Path = UIBezierPath(rect: CGRect(x: 579, y: 138, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle12Path.fill()
        }


        //// label 16 Drawing
        let label16Rect = CGRect(x: 412, y: 155, width: 164, height: 16)
        let label16TextContent = "release arm & safety latch"
        let label16Style = NSMutableParagraphStyle()
        label16Style.alignment = .left
        let label16FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label16Style,
        ] as [NSAttributedStringKey: Any]

        let label16TextHeight: CGFloat = label16TextContent.boundingRect(with: CGSize(width: label16Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label16FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label16Rect)
        label16TextContent.draw(in: CGRect(x: label16Rect.minX, y: label16Rect.minY + (label16Rect.height - label16TextHeight) / 2, width: label16Rect.width, height: label16TextHeight), withAttributes: label16FontAttributes)
        context.restoreGState()


        if (acvTstTractorCouplingReleaseArmSafetyLatch) {
            //// Rectangle 16 Drawing
            let rectangle16Path = UIBezierPath(rect: CGRect(x: 579, y: 158, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle16Path.fill()
        }


        //// label 17 Drawing
        let label17Rect = CGRect(x: 412, y: 175, width: 164, height: 16)
        let label17TextContent = "5th wheel skid plate"
        let label17Style = NSMutableParagraphStyle()
        label17Style.alignment = .left
        let label17FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label17Style,
        ] as [NSAttributedStringKey: Any]

        let label17TextHeight: CGFloat = label17TextContent.boundingRect(with: CGSize(width: label17Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label17FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label17Rect)
        label17TextContent.draw(in: CGRect(x: label17Rect.minX, y: label17Rect.minY + (label17Rect.height - label17TextHeight) / 2, width: label17Rect.width, height: label17TextHeight), withAttributes: label17FontAttributes)
        context.restoreGState()


        if (acvTstTractorCouplingFifthWheelSkidPlate) {
            //// Rectangle 17 Drawing
            let rectangle17Path = UIBezierPath(rect: CGRect(x: 579, y: 178, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle17Path.fill()
        }


        //// label 18 Drawing
        let label18Rect = CGRect(x: 412, y: 195, width: 164, height: 29)
        let label18TextContent = "slide 5th wheel pins (clearance)"
        let label18Style = NSMutableParagraphStyle()
        label18Style.alignment = .left
        let label18FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label18Style,
        ] as [NSAttributedStringKey: Any]

        let label18TextHeight: CGFloat = label18TextContent.boundingRect(with: CGSize(width: label18Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label18FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label18Rect)
        label18TextContent.draw(in: CGRect(x: label18Rect.minX, y: label18Rect.minY + (label18Rect.height - label18TextHeight) / 2, width: label18Rect.width, height: label18TextHeight), withAttributes: label18FontAttributes)
        context.restoreGState()


        if (acvTstTractorCouplingSlideFifthWheelPins) {
            //// Rectangle 18 Drawing
            let rectangle18Path = UIBezierPath(rect: CGRect(x: 579, y: 210, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle18Path.fill()
        }


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 455, y: 23, width: 100, height: 18)
        let text7TextContent = "Tractor"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text7Style,
        ] as [NSAttributedStringKey: Any]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// label 19 Drawing
        let label19Rect = CGRect(x: 602, y: 48, width: 164, height: 13)
        let label19TextContent = "air & electric connectors"
        let label19Style = NSMutableParagraphStyle()
        label19Style.alignment = .left
        let label19FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label19Style,
        ] as [NSAttributedStringKey: Any]

        let label19TextHeight: CGFloat = label19TextContent.boundingRect(with: CGSize(width: label19Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label19FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label19Rect)
        label19TextContent.draw(in: CGRect(x: label19Rect.minX, y: label19Rect.minY + (label19Rect.height - label19TextHeight) / 2, width: label19Rect.width, height: label19TextHeight), withAttributes: label19FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerAirElectricConnectors) {
            //// Rectangle 19 Drawing
            let rectangle19Path = UIBezierPath(rect: CGRect(x: 779, y: 49, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle19Path.fill()
        }


        //// label 20 Drawing
        let label20Rect = CGRect(x: 602, y: 95, width: 177, height: 16)
        let label20TextContent = "mounting bolts"
        let label20Style = NSMutableParagraphStyle()
        label20Style.alignment = .left
        let label20FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label20Style,
        ] as [NSAttributedStringKey: Any]

        let label20TextHeight: CGFloat = label20TextContent.boundingRect(with: CGSize(width: label20Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label20FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label20Rect)
        label20TextContent.draw(in: CGRect(x: label20Rect.minX, y: label20Rect.minY + (label20Rect.height - label20TextHeight) / 2, width: label20Rect.width, height: label20TextHeight), withAttributes: label20FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerCouplingMountingBolts) {
            //// Rectangle 20 Drawing
            let rectangle20Path = UIBezierPath(rect: CGRect(x: 779, y: 98, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle20Path.fill()
        }


        //// label 21 Drawing
        let label21Rect = CGRect(x: 602, y: 115, width: 116, height: 16)
        let label21TextContent = "platform"
        let label21Style = NSMutableParagraphStyle()
        label21Style.alignment = .left
        let label21FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label21Style,
        ] as [NSAttributedStringKey: Any]

        let label21TextHeight: CGFloat = label21TextContent.boundingRect(with: CGSize(width: label21Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label21FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label21Rect)
        label21TextContent.draw(in: CGRect(x: label21Rect.minX, y: label21Rect.minY + (label21Rect.height - label21TextHeight) / 2, width: label21Rect.width, height: label21TextHeight), withAttributes: label21FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerCouplingPlatform) {
            //// Rectangle 21 Drawing
            let rectangle21Path = UIBezierPath(rect: CGRect(x: 779, y: 118, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle21Path.fill()
        }


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 601, y: 78, width: 131, height: 18)
        let text8TextContent = "Coupling System"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .left
        let text8FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text8Style,
        ] as [NSAttributedStringKey: Any]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// label 22 Drawing
        let label22Rect = CGRect(x: 602, y: 135, width: 177, height: 16)
        let label22TextContent = "locking jaws or lever"
        let label22Style = NSMutableParagraphStyle()
        label22Style.alignment = .left
        let label22FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label22Style,
        ] as [NSAttributedStringKey: Any]

        let label22TextHeight: CGFloat = label22TextContent.boundingRect(with: CGSize(width: label22Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label22FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label22Rect)
        label22TextContent.draw(in: CGRect(x: label22Rect.minX, y: label22Rect.minY + (label22Rect.height - label22TextHeight) / 2, width: label22Rect.width, height: label22TextHeight), withAttributes: label22FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerCouplingLockingJawsLever) {
            //// Rectangle 22 Drawing
            let rectangle22Path = UIBezierPath(rect: CGRect(x: 779, y: 138, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle22Path.fill()
        }


        //// label 23 Drawing
        let label23Rect = CGRect(x: 602, y: 155, width: 164, height: 16)
        let label23TextContent = "release arm & safety latch"
        let label23Style = NSMutableParagraphStyle()
        label23Style.alignment = .left
        let label23FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label23Style,
        ] as [NSAttributedStringKey: Any]

        let label23TextHeight: CGFloat = label23TextContent.boundingRect(with: CGSize(width: label23Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label23FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label23Rect)
        label23TextContent.draw(in: CGRect(x: label23Rect.minX, y: label23Rect.minY + (label23Rect.height - label23TextHeight) / 2, width: label23Rect.width, height: label23TextHeight), withAttributes: label23FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerCouplingReleaseArmSafetyLatch) {
            //// Rectangle 23 Drawing
            let rectangle23Path = UIBezierPath(rect: CGRect(x: 779, y: 158, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle23Path.fill()
        }


        //// label 24 Drawing
        let label24Rect = CGRect(x: 602, y: 175, width: 164, height: 16)
        let label24TextContent = "5th wheel skid plate"
        let label24Style = NSMutableParagraphStyle()
        label24Style.alignment = .left
        let label24FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label24Style,
        ] as [NSAttributedStringKey: Any]

        let label24TextHeight: CGFloat = label24TextContent.boundingRect(with: CGSize(width: label24Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label24FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label24Rect)
        label24TextContent.draw(in: CGRect(x: label24Rect.minX, y: label24Rect.minY + (label24Rect.height - label24TextHeight) / 2, width: label24Rect.width, height: label24TextHeight), withAttributes: label24FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerCouplingFifthWheelSkidPlate) {
            //// Rectangle 24 Drawing
            let rectangle24Path = UIBezierPath(rect: CGRect(x: 779, y: 178, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle24Path.fill()
        }


        //// label 25 Drawing
        let label25Rect = CGRect(x: 602, y: 195, width: 164, height: 29)
        let label25TextContent = "slide 5th wheel pins (clearance)"
        let label25Style = NSMutableParagraphStyle()
        label25Style.alignment = .left
        let label25FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: label25Style,
        ] as [NSAttributedStringKey: Any]

        let label25TextHeight: CGFloat = label25TextContent.boundingRect(with: CGSize(width: label25Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label25FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label25Rect)
        label25TextContent.draw(in: CGRect(x: label25Rect.minX, y: label25Rect.minY + (label25Rect.height - label25TextHeight) / 2, width: label25Rect.width, height: label25TextHeight), withAttributes: label25FontAttributes)
        context.restoreGState()


        if (acvTstSemiTrailerCouplingSlideFifthWheelPins) {
            //// Rectangle 25 Drawing
            let rectangle25Path = UIBezierPath(rect: CGRect(x: 779, y: 210, width: 10, height: 10))
            UIColor.darkGray.setFill()
            rectangle25Path.fill()
        }


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 645, y: 23, width: 100, height: 18)
        let text9TextContent = "Semi-Trailer"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.systemFontSize, weight: .bold),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text9Style,
        ] as [NSAttributedStringKey: Any]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(ResultsPDFResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
